import React, { useState } from "react";
import {
  View, Text, StyleSheet, Image, ImageBackground,
  TextInput, TouchableOpacity, ScrollView, KeyboardAvoidingView,
  Platform, ActivityIndicator, Alert
} from "react-native";
import { router } from "expo-router";
import { supabase } from "../lib/supabaseClient";

const DEMO_MODE = false; // ‡∏ï‡∏±‡πâ‡∏á true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

export default function LoginScreen() {
  const [psuId, setPsuId] = useState("");
  const [password, setPassword] = useState("");
  const [busy, setBusy] = useState(false);
  const [log, setLog] = useState("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö");

  const onLogin = async () => {
    setLog("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß"); // ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ß‡πà‡∏≤ onPress ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    console.log("[login] pressed");
    if (!psuId || !password) {
      setLog("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      Alert.alert("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      return;
    }

    if (DEMO_MODE) {
      setLog("DEMO_MODE: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home");
      router.replace("/home");
      return;
    }

    try {
      setBusy(true);
      setLog("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶");
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
      const { error: pingErr } = await supabase.from("users").select("psu_id").limit(1);
      if (pingErr) {
        setLog("‚ùå DB/policy error: " + pingErr.message);
        Alert.alert("DB Error", pingErr.message);
        setBusy(false);
        return;
      }

      setLog("‡πÄ‡∏£‡∏µ‡∏¢‡∏Å RPC app_login ‚Ä¶");
      const { data, error } = await supabase.rpc("app_login", {
        p_psu_id: psuId.trim(),
        p_password: password,
      });

      if (error) {
        setLog("‚ùå RPC error: " + error.message);
        Alert.alert("‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error.message);
        setBusy(false);
        return;
      }
      if (!data || data.length === 0) {
        setLog("‚ùå PSU ID ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        Alert.alert("‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "PSU ID ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        setBusy(false);
        return;
      }

      setLog("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + data[0].full_name);
      Alert.alert("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${data[0].full_name}`);
      router.replace("/home");
    } catch (e: any) {
      console.error(e);
      setLog("‚ùå Exception: " + (e?.message || String(e)));
      Alert.alert("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", e?.message || String(e));
    } finally {
      setBusy(false);
    }
  };

  const pingDB = async () => {
    try {
      setBusy(true);
      setLog("Ping ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Ä¶");
      const { data, error } = await supabase.from("users").select("psu_id").limit(1);
      if (error) setLog("‚ùå DB error: " + error.message);
      else setLog("‚úÖ DB ok: " + JSON.stringify(data));
    } catch (e: any) {
      setLog("‚ùå Exception: " + e?.message);
    } finally {
      setBusy(false);
    }
  };

  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === "ios" ? "padding" : undefined}>
      <ScrollView contentContainerStyle={{ flexGrow: 1, backgroundColor: "#fff" }}>
        {/* HEADER (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) */}
        <ImageBackground source={require("../assets/images/header.jpg")} style={styles.header} resizeMode="cover">
          <View style={styles.overlay} />
          <View style={styles.headerInner}>
            <Image source={require("../assets/images/PSU-logo.png")} style={styles.logo} resizeMode="contain" />
            <Text style={styles.headerTitle}>‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô</Text>
            <Text style={styles.headerSubtitle}>‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢/‡∏û‡∏ö‡∏Ç‡∏≠‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£</Text>
          </View>
        </ImageBackground>

        {/* BODY */}
        <View style={styles.body}>
          <View style={styles.card}>
            <Text style={styles.label}>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</Text>
            <TextInput
              value={psuId}
              onChangeText={setPsuId}
              placeholder="6987654321"
              autoCapitalize="none"
              style={styles.input}
              placeholderTextColor="#94A3B8"
            />

            <Text style={[styles.label, { marginTop: 12 }]}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</Text>
            <TextInput
              value={password}
              onChangeText={setPassword}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              secureTextEntry
              style={styles.input}
              placeholderTextColor="#94A3B8"
            />

            <TouchableOpacity style={[styles.btn, busy && { opacity: 0.6 }]} onPress={onLogin} disabled={busy} activeOpacity={0.9}>
              <Text style={styles.btnText}>{busy ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‚Ä¶" : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"}</Text>
            </TouchableOpacity>

            <TouchableOpacity style={[styles.btnSecondary, busy && { opacity: 0.6 }]} onPress={pingDB} disabled={busy} activeOpacity={0.9}>
              <Text style={styles.btnSecondaryText}>üîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Text>
            </TouchableOpacity>

            {busy && <ActivityIndicator style={{ marginTop: 8 }} />}
          </View>

          {/* DEBUG BOX */}
          <View style={styles.debugBox}>
            <Text style={styles.debugTitle}>Debug</Text>
            <Text selectable style={styles.debugText}>
              env: url={(process.env.EXPO_PUBLIC_SUPABASE_URL || "").slice(0, 32)}‚Ä¶ key={(process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || "").slice(0, 6)}‚Ä¶
            </Text>
            <Text selectable style={styles.debugText}>{log}</Text>
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const RADIUS = 14;
const styles = StyleSheet.create({
  header: { height: 220, justifyContent: "flex-end" },
  overlay: { ...StyleSheet.absoluteFillObject, backgroundColor: "rgba(0,0,0,0.45)" },
  headerInner: { paddingHorizontal: 16, paddingBottom: 16 },
  logo: { width: 150, height: 68, marginBottom: 12 },
  headerTitle: { color: "#fff", fontSize: 22, fontWeight: "900" },
  headerSubtitle: { color: "#E5E7EB", fontSize: 12, marginTop: 4 },

  body: { paddingHorizontal: 16, marginTop: -28, alignItems: "center" },
  card: {
    width: "100%", maxWidth: 360, backgroundColor: "#fff",
    borderRadius: RADIUS, padding: 16, borderWidth: 1, borderColor: "#EBEEF3",
  },
  label: { fontSize: 13, color: "#0F172A", fontWeight: "700", marginBottom: 6 },
  input: {
    height: 44, paddingHorizontal: 12, borderRadius: 10,
    backgroundColor: "#F3F6FB", borderWidth: 1, borderColor: "#DDE4EE",
  },
  btn: {
    marginTop: 16, height: 48, borderRadius: 12,
    alignItems: "center", justifyContent: "center", backgroundColor: "#2563EB",
  },
  btnText: { color: "#fff", fontWeight: "800", fontSize: 15 },
  btnSecondary: {
    marginTop: 10, height: 44, borderRadius: 10, alignItems: "center",
    justifyContent: "center", backgroundColor: "#111827",
  },
  btnSecondaryText: { color: "#fff", fontWeight: "700" },

  debugBox: {
    width: "100%", maxWidth: 360, marginTop: 12,
    borderWidth: 1, borderColor: "#E5E7EB", borderRadius: 10, padding: 12, backgroundColor: "#F8FAFC",
  },
  debugTitle: { fontWeight: "800", marginBottom: 6 },
  debugText: { fontFamily: Platform.select({ web: "monospace", default: undefined }) },
});